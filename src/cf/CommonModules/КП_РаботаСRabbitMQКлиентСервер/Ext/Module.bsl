#Область ПодключениеИнициализацияКомпоненты

//&НаКлиенте
//Процедура ПодключитьКомпонентуКлиент(КомпонентаПодключена = Неопределено)
//	
//	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(ЭтаФорма.УникальныйИдентификатор);
//	
//	УстановитьВнешнююКомпоненту(АдресВоВременномХранилище);
//	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
//			АдресВоВременномХранилище,
//			"BITERP",
//			ТипВнешнейКомпоненты.Native);
//	Сообщить(НСтр("ru = 'Компонента подключена!'"));
//КонецПроцедуры

&НаСервере
Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(Новый УникальныйИдентификатор);
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'")); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомпонентуСервер()
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОтправитьСообщение(ТекстСообщения) Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	ПараметрыПередачи = ПолучитьПараметрыОчередиОбмена();
	ОтправитьСообщениеСервер(КлиентКомпоненты, ПараметрыПодключения, ПараметрыПередачи, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьСообщение() Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	ПараметрыПередачи = ПолучитьПараметрыОчередиОбмена();
	ТекстСообщения = ПрочитатьСообщениеСервер(КлиентКомпоненты, ПараметрыПодключения, ПараметрыПередачи);
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаСервере
Процедура ПроверитьПодключение(Команда)
		
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	ПроверитьПодключениеСервер(КлиентКомпоненты, ПараметрыПодключения);
	
КонецПроцедуры

#Область СлужебныеПроцедуры

&НаСервере
Функция ПолучитьАдресМакетаКомпановкиНаСервере(УникальныйИдентификатор)
	
	МакетВнешнейКомпоненты    = ПолучитьОбщийМакет("КП_Rabbit_MQ_2");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Функция ИнициализироватьКомпонентуСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботаСRabbitMQ

&НаСервере
Процедура ПроверитьПодключениеСервер(КлиентКомпоненты, ПараметрыПодключения)
	
	Попытка
		КлиентКомпоненты.Connect(
				ПараметрыПодключения.Адрес,
				ПараметрыПодключения.Порт,
				ПараметрыПодключения.Логин,
				ПараметрыПодключения.Пароль,
				ПараметрыПодключения.ВиртуальныйХост);
			Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка подключения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить(НСтр("ru = 'Подключение успешно выполнено!'"));
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеСервер(КлиентКомпоненты, ПараметрыПодключения, ПараметрыОчередиОбмена, ТекстСообщения)
	
	Попытка
		КлиентКомпоненты.Connect(
			ПараметрыПодключения.Адрес,
			ПараметрыПодключения.Порт,
			ПараметрыПодключения.Логин,
			ПараметрыПодключения.Пароль,
			ПараметрыПодключения.ВиртуальныйХост);
		
		ТочкаОбмена    = ПараметрыОчередиОбмена.ТочкаОбмена;
		ИмяОчереди     = ПараметрыОчередиОбмена.ИмяОчереди;
		КлючМаршрутизации = ПараметрыОчередиОбмена.КлючМаршрутизации;
		
		КлиентКомпоненты.BasicPublish(
			ТочкаОбмена,
			КлючМаршрутизации,
			ТекстСообщения,
			1,
			Ложь);
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить("Сообщение успешно отправлено!");
КонецПроцедуры

&НаСервере
Функция ПрочитатьСообщениеСервер(КлиентКомпоненты, ПараметрыПодключения, ПараметрыОчередиОбмена) Экспорт
	
	ТекстСообщения = "";
	
	Попытка
		КлиентКомпоненты.Connect(
			ПараметрыПодключения.Адрес,
			ПараметрыПодключения.Порт,
			ПараметрыПодключения.Логин,
			ПараметрыПодключения.Пароль,
			ПараметрыПодключения.ВиртуальныйХост);
		
		ИмяОчереди = ПараметрыОчередиОбмена.ИмяОчереди;
		
		Попытка
			//КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
			
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			
			ОтветноеСообщение = "";
			Если КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
				КлиентКомпоненты.BasicAck();
				ТекстСообщения = ОтветноеСообщение;
				ТекстОтвета = НСтр("ru='Сообщение успешно прочитано!'");
			Иначе
				ТекстСообщения = ОтветноеСообщение;
				ТекстОтвета = НСтр("ru='Очередь пустая!'");
			КонецЕсли;
			Сообщить(ТекстОтвета);
			
			КлиентКомпоненты.BasicCancel("");
		Исключение
			ВызватьИсключение КлиентКомпоненты.GetLastError();
		КонецПопытки;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстОтвета;
	КонецПопытки;
	
	Возврат ТекстСообщения;
	
КонецФункции  

&НаСервере 
Функция ПолучитьПараметрыПодключения()  
	
	НастройкиСервера = Справочники.КП_ПараметрыПодключенияRabbitMQ.НайтиПоКоду("000000001");  
	
	ПараметрыПодключения = Новый Структура();
	ПараметрыПодключения.Вставить("Адрес", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиСервера, "Адрес"));
	ПараметрыПодключения.Вставить("Порт", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиСервера, "Порт"));
	ПараметрыПодключения.Вставить("Логин", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиСервера, "Логин"));
	ПараметрыПодключения.Вставить("Пароль", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиСервера, "Пароль"));
	ПараметрыПодключения.Вставить("ВиртуальныйХост", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиСервера, "ВиртуальныйХост"));
	
	Возврат ПараметрыПодключения;	
		
КонецФункции  

&НаСервере 
Функция ПолучитьПараметрыОчередиОбмена()  
	
	НастройкиОчередиОбмена = Справочники.КП_ПараметрыПередачиRabbitMQ.НайтиПоКоду("000000001");  
	
	ПараметрыОчередиОбмена = Новый Структура();
	ПараметрыОчередиОбмена.Вставить("ТочкаОбмена", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиОчередиОбмена, "ТочкаОбмена"));
	ПараметрыОчередиОбмена.Вставить("ИмяОчереди", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиОчередиОбмена, "ИмяОчереди"));
	ПараметрыОчередиОбмена.Вставить("КлючМаршрутизации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиОчередиОбмена, "КлючМаршрутизации"));	

	Возврат ПараметрыОчередиОбмена;	
		
КонецФункции

Процедура КП_СозданиеЗаявкиПоПриказу() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстОтвета = ПрочитатьСообщение();
	
	Если ТекстОтвета = "Утверждён" Тогда
		
		НоваяЗаявка = Документы.КП_ЗаявкаНаВыдачуПодарочныхСертификатов.СоздатьДокумент();
		НоваяЗаявка.Дата = ТекущаяДатаСеанса();
		НоваяЗаявка.Ответсвенный = Справочники.Пользователи.НайтиПоНаименованию("Жук Руслан Игоревич");
		НоваяЗаявка.Записать();  
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

